/*
* Fancy Music Player V2.2.1
* Author: Rafael Dery
* Copyright 2011
*
* Only for the sale at the envato marketplaces
*
*/

;(function($) {
	$.fancyMusicPlayer = {version: '2.2.1', author: 'Rafael Dery'};
	
	jQuery.fn.fancyMusicPlayer = function(arg) {
		var options = $.extend({},$.fn.fancyMusicPlayer.defaults,arg);
		var $elem, player, currentTime, scrollPaneApi, timeBarWidth, currentIndex = options.startIndex, currentVolume, timeSliderMoving = false, paused = !options.autoPlay;
		var tracks = new Array(),
		    titles = new Array(),
		    urls = new Array();
			
		function _init(elem) {
			
			$elem = $(elem);
			
			$elem.addClass('fmp-container').append("<p>Initializing MP3-Player...</p>");
									
			soundManager.onready(_onSoundManagerReady);
			
			soundManager.ontimeout(function(status){
			    alert('SM2 failed to start. Flash missing, blocked or security error? Status: '+ status.error.type);
			});
			
		};
		
		//get tracks
		function _onSoundManagerReady() {	
		    				
			if(options.xmlPath) {
				//get playlist from xml file
				$.ajax({ type: "GET", url: options.xmlPath, dataType: "xml", cache: false, success: function(xml) {
					var playlists = $(xml).find('playlists');
					var playlistId;
					
					//check if a start playlist is set
					if(options.xmlPlaylist) {
						playlistId = options.xmlPlaylist;			
					}
					else {
						playlistId = playlists.children('playlist:first').attr('id');
					}
                    
					//get the start playlist
					playlists.children('playlist[id="'+playlistId+'"]').children('track').each(function(index, child) {
						var $child = $(child);
						tracks[index] = $child.attr('href');
						titles[index] = $child.attr('title');
						urls[index] = $child.attr('target');
					});
					
					_buildPlayer();

					//check if custom xml playlists are set
					$('.fmp-xml-playlist').each(function(i, playlist) {
						var $playlist = $(playlist);
						$playlist.append('<h3>'+playlist.title+'</h3><ul class="fmp-my-playlist"></ul>');
						//get the start playlist
						playlists.children('playlist[id="'+playlist.id+'"]').children('track').each(function(j, track) {
							var $track = $(track);
							var targetString = $track.attr('target') ? 'target="'+$track.attr('target')+'"' : 'target=" "';
							$playlist.children('ul').append('<li><a href="'+$track.attr('href')+'" title="'+$track.attr('title')+'" '+targetString+'>'+$track.attr('title')+'</a></li>');
						});
					});
				},
				error: function() {
					alert("XML file could not be loaded. Please check the XML path!");	
				}
			  });
			}
			else {
				//get playlist from HTML dom
				$elem.children('a').hide().each(function(index, child) {
					tracks[index] = child.href;
					titles[index] = child.title;
					urls[index] = child.target;
				});
				
				_buildPlayer();
			}
			
		};
			
		function _buildPlayer() {
			
			$elem.find('p:first, div').remove();
						
			//create control bar			
			$elem.append('<div class="clearfix"><a href="#" class="fmp-previous-button fmp-previous-button-normal"><div class="fmp-previous"></div></a><a href="#" class="fmp-pp-button fmp-play-button-normal"><div class="fmp-play"></div></a><a href="#" class="fmp-next-button fmp-next-button-normal"><div class="fmp-next"></div></a><div class="fmp-time-bar"><div class="fmp-time"><span></span><div class="fmp-time-arrow-border"></div><div class="fmp-time-arrow"></div></div><div class="fmp-loading-bar"></div><div class="fmp-progress-bar"></div><div class="fmp-time-slider"></div></div></div>');
			
			timeBarWidth = $elem.find('.fmp-time-bar').width();
			$elem.children('div:first').disableSelection();
			$elem.find('.fmp-time').css({opacity: 0, top: -40});
			if(!$.support.leadingWhitespace) {
				//hide time arrows in IE-6-8
				$elem.find('.fmp-time').children('.fmp-time-arrow-border, .fmp-time-arrow').hide();
			}
			
			if(options.volume) {
				$elem.find("div:first").append('<div class="fmp-sound-control"><div class="fmp-volume-button fmp-button-normal"></div><div class="fmp-volume-bar"><div class="fmp-volume-arrow-border"></div><div class="fmp-volume-arrow"></div><div class="fmp-volume-slider"></div><div class="fmp-volume-state-background"><div class="fmp-volume-state"></div></div></div></div>');	
			}
			
			
			if(options.playlist) {
				
				//create playlist
				$elem.append('<div class="fmp-tracks-container clearfix"><div class="fmp-playlist-button fmp-button-normal"></div><span class="fmp-current-title"></span></div><div class="fmp-playlist-container"><div class="fmp-playlist-scroll" style="height:'+options.playlistHeight+'px;"><ul class="fmp-playlist"></ul></div></div>');
				
				//add tracks to the playlist
				for(var i=0; i<titles.length; ++i) {
					_createPlaylistTrack(i, titles[i], urls[i]);
				}
				
				$elem.find('.fmp-playlist li:first').css('marginTop', 0);
			}
			else {
				$elem.append('<div class="fmp-tracks-container clearfix"><span class="fmp-current-title"></span></div>');
			}
			
			
			//hover handlers
			$elem.find('.fmp-pp-button').hover(
			  function() {
				  var $this = $(this);
				  if(paused) { $this.removeClass('fmp-play-button-normal').addClass('fmp-play-button-hover'); }
				  else { $this.removeClass('fmp-pause-button-normal').addClass('fmp-pause-button-hover'); }
			  },
			  function() {
				  var $this = $(this);
				  if(paused) { $this.removeClass('fmp-play-button-hover').addClass('fmp-play-button-normal'); }
				  else { $this.removeClass('fmp-pause-button-hover').addClass('fmp-pause-button-normal'); }
			  }
			);
				
			$elem.find('.fmp-previous-button').hover(
			  function() {
				  var $this = $(this);
				  $this.removeClass('fmp-previous-button-normal').addClass('fmp-previous-button-hover').children('div').stop().fadeTo(500, 1);
			  },
			  function() { 
			      var $this = $(this); 
				  $this.removeClass('fmp-previous-button-hover fmp-previous-button-press').addClass('fmp-previous-button-normal').children('div').stop().fadeTo(400, 0.8);
			  }
			).children('div').fadeTo(0, 0.8);
			
			$elem.find('.fmp-next-button').hover(
			  function() {
				  var $this = $(this);
				  $this.removeClass('fmp-next-button-normal').addClass('fmp-next-button-hover').children('div').stop().fadeTo(500, 1);
			  },
			  function() {
				  var $this = $(this);
				  $this.removeClass('fmp-next-button-hover fmp-next-button-press').addClass('fmp-next-button-normal').children('div').stop().fadeTo(400, 0.8);
			  }
			).children('div').fadeTo(0, 0.8);
			
			$elem.find('.fmp-time-slider').hover(
			  function() {
				  if(tracks.length > 0) {
					  var timeBox = $elem.find('.fmp-time').data('hover', true);
					  if(!timeSliderMoving) {
						  timeBox.stop().css({opacity: 0, top: -40}).animate({opacity: 1, top: -30}, 300);
					  }
				  }
			  },
			  function() {
				  if(tracks.length > 0) {
					  var timeBox = $elem.find('.fmp-time').data('hover', false);
					  if(!timeSliderMoving) {
						  timeBox.stop().animate({opacity: 0, top: -40}, 200);
					  }
				  }
			  }
			);
			
			$(".fmp-previous-button").mouseup(
			  function(){
				  $(this).removeClass('fmp-previous-button-press').addClass('fmp-previous-button-hover');
			}).mousedown(
			  function(){
				  $(this).removeClass('fmp-previous-button-hover').addClass('fmp-previous-button-press');
			});
			
			$(".fmp-next-button").mouseup(
			  function(){
				  $(this).removeClass('fmp-next-button-press').addClass('fmp-next-button-hover');
			}).mousedown(
			  function(){
				  $(this).removeClass('fmp-next-button-hover').addClass('fmp-next-button-press');
			});

			//hover for the titles in the playlist	
			$elem.find('.fmp-playlist li span').live('mouseover mouseout', function(evt) {
				if(evt.type == "mouseover" ) {
					var $this = $(this);
					if($elem.find('.fmp-playlist li').index($this.parent()) == currentIndex) { return false; }
					$this.stop().animate({'color': options.trackColorHover}, 500);
				}
				else {
					var $this = $(this);
					if($elem.find('.fmp-playlist li').index($this.parent()) == currentIndex) { return false; }
					$this.stop().animate({'color': options.trackColorNormal}, 500);
				}
			  }
			).addClass('fmp-track-normal');
			
			//hover for delete buttons in the playlist
			$elem.find('.fmp-delete-track, .fmp-track-link').live('mouseover mouseout', function(evt) {
				if(evt.type == "mouseover" ) {
					$(this).stop().fadeTo(500, 1);
				}
				else {
					$(this).stop().fadeTo(500, 0.6);
				}
			  }
			);
			
			
			//play previous track
			$elem.find('.fmp-previous-button').click(function() {
				$.fancyMusicPlayer.previous();
				return false;
			});
			
			//play next track
			$elem.find('.fmp-next-button').click(function() {
				$.fancyMusicPlayer.next();
				return false;
			});
			
			//toggle play/pause
			$elem.find('.fmp-pp-button').click(function() {
				$.fancyMusicPlayer.toggle();
				return false;
			});
			
			//start dragging time slider
			$elem.find('.fmp-time-slider').live('mousedown', function(evt) {
				$(document).bind('mouseup', _dropTimeSlider);
				$(document).bind('mousemove', _onTimeSliderMove);
			});
			
			//toggle volume slider
			$elem.find('.fmp-volume-button').click(function() {
				if(!$elem.find('.fmp-volume-bar').is(':animated')) {
					var $this = $(this);
					if($this.hasClass('fmp-button-active')) { $this.removeClass('fmp-button-active').addClass('fmp-button-normal') }
					else { $this.removeClass('fmp-button-normal').addClass('fmp-button-active') };
					$elem.find('.fmp-volume-bar').slideToggle(200);	
				}								
			});
			
			//start dragging volume slider
			$elem.find('.fmp-volume-slider').live('mousedown', function(evt) {
				$(document).bind('mouseup', _dropVolumeSlider);
				$(document).bind('mousemove', _onVolumeSliderMove);
			}).dblclick(function() {
				if($elem.find('.fmp-volume-slider').position().top == 0) {
					$.fancyMusicPlayer.volume(1);
				}
				else {
					$.fancyMusicPlayer.volume(0);		
				}
			});
			
			//toggle slide of playlist
			$elem.find('.fmp-playlist-button').click(function() {
				var $this = $(this);
				if(!$elem.find('.fmp-playlist-container').is(':animated')) {
					if($this.hasClass('fmp-button-active')) { $this.removeClass('fmp-button-active').addClass('fmp-button-normal') }
					else { $this.removeClass('fmp-button-normal').addClass('fmp-button-active') };
					$elem.find('.fmp-playlist-container').slideToggle(500);
				}					
			});
			
			//delete track from playlist
			$elem.find('.fmp-playlist li .fmp-delete-track').live('click', function() {
				var $this = $(this),
				    index = $elem.find('.fmp-playlist li').index($this.parent());
				tracks.splice(index, 1);
				titles.splice(index, 1);
				urls.splice(index, 1);
				$this.parent().remove();
				
				//rename upcoming titles
				for(var i=index; i < $elem.find('.fmp-playlist li').length; ++i) {
					$elem.find('.fmp-playlist li').eq(i).children('span').text((i+1)+'- '+titles[i]+'');
				}				
			});
			
			//play track from playlist
			$elem.find('.fmp-playlist li span').live('click', function() {
				currentIndex = $elem.find('.fmp-playlist li').index($(this).parent());
				_selectTrack(currentIndex, true);
			});
			
			//open track link from playlist
			$elem.find('.fmp-playlist li .fmp-track-link').live('click', function() {
				var index = $elem.find('.fmp-playlist li').index($(this).parent());
				window.open(urls[index], options.targetLink);
			});		
			
			//custom tracks
			$('.fmp-my-playlist li a, a.fmp-my-track').live('click', function() {
				//console.log(this.target);
				$.fancyMusicPlayer.addTrack(this.href, this.title, this.target);
				return false;
			});
			
			//make playlist scrollable
			if(options.playlistScrollable) {
				var playlistScrollPane = $elem.find('.fmp-playlist-scroll');
				playlistScrollPane.jScrollPane({autoReinitialise: true});
				scrollPaneApi = playlistScrollPane.data('jsp');	
				$elem.find('.fmp-playlist-container').height('100%');
			}
			else {
				$elem.find('.fmp-playlist').unwrap();
			}
			
			//open playlist
			if(options.playlistInitOpen) {
				$elem.find('.fmp-playlist-button').removeClass('fmp-button-normal').addClass('fmp-button-active');
				$elem.find('.fmp-playlist-container').show();
			}	

			//select first track when playlist has tracks		
			if(tracks.length > 0) {
				_selectTrack(options.startIndex, options.autoPlay);
			}
			
			options.onReady();
		};
		
		//selects a track by index
		/*function _selectTrack(index, playIt) {
			
			if(playIt) {
				$elem.find('.fmp-pp-button div').removeClass().addClass('fmp-pause');
				$elem.find('.fmp-pp-button').removeClass('fmp-play-button-normal').addClass('fmp-pause-button-normal');
				paused = false;	
			} 
			else {
				$elem.find('.fmp-pp-button div').removeClass().addClass('fmp-play');
				$elem.find('.fmp-pp-button').removeClass('fmp-pause-button-normal').addClass('fmp-play-button-normal');
				paused = true;	
			}
				
			$elem.find('.fmp-playlist li span').stop().css('color', options.trackColorNormal).eq(index).css('color', options.trackColorSelected);
			$elem.find('.fmp-loading-bar').width(0);
			$elem.find('.fmp-progress-bar').width(0);
			$elem.find('.fmp-time').css('left', -13).find('span').text(options.showHours ? '00:00:00' : '00:00');
			$elem.find('.fmp-time-slider').css('left', -6);
			$elem.find('.fmp-current-title').text(titles[index]);
			
			if(player) {
				player.destruct();
			}
			
			player = soundManager.createSound({
				id: 'fmp_sound',
				url: tracks[index],
				autoPlay: playIt,
				autoLoad: options.autoLoad,
				volume: currentVolume,
				whileloading: _onLoading,
				whileplaying: _onPlaying,
				onfinish: _onFinish
			});	
	
		};*/
		
		$.fancyMusicPlayer.selectTrack = _selectTrack;
		
		/*function _onLoading() {
			$elem.find('.spa-loading-bar').width(( this.bytesLoaded / this.bytesTotal) * timeBarWidth);
		};
		
		//gets called by flash when its playing
		function _onPlaying() {
			var time = _convertTime(this.position/1000);
			if(currentTime != time) {
				$elem.find('.fmp-time span').text(time);
				_setSliderPosition(this.position / this.duration);
			}
			
			currentTime = time;
		};*/
		
		/*function _onFinish() {
			if(options.playNextWhenFinished) {
				$.fancyMusicPlayer.next();
			}
			else {
				$.fancyMusicPlayer.pause();
				player.setPosition(0);
				_setSliderPosition(0);
			}
		};*/
		
		//the time slider move handler
		function _onTimeSliderMove(evt) {
			if($elem.find('.fmp-loading-bar').width() == 0) { return false };
			timeSliderMoving = true;
			
			//calculate min and max range
			var minX = -6;
			var maxX = $elem.find('.fmp-loading-bar').width()+minX;
			var mouseX = evt.pageX-$elem.find('.fmp-progress-bar').offset().left-6;	
			if(mouseX < minX) {
				mouseX = minX;
			}
			if(mouseX > maxX) {
				mouseX = maxX;
			}
			//calculate progress(0-1)
			var progress = (mouseX+6)/timeBarWidth;
            
			player.pause();			
			player.setPosition(progress * player.duration);
			_setSliderPosition(progress);
		};
		
		//will be called when the drag slider will be released
		function _dropTimeSlider() {
			var timeBox = $elem.find('.fmp-time');
			if(!timeBox.data('hover')) {
				$elem.find('.fmp-time').stop().animate({opacity: 0, top: -40}, 200);
			}
			
			if($elem.find('.fmp-loading-bar').width() == 0) { return false };
			timeSliderMoving = false;
			
			$(document).unbind('mousemove', _onTimeSliderMove);
			$(document).unbind('mouseup', _dropTimeSlider);
			
			paused ? player.pause() : player.resume();
			if(player.duration == player.position) {
				_onFinish();
			}
			
		};
		
		function _onVolumeSliderMove(evt) {            
			//calculate min and max range
			var minY = 0;
			var maxY = $elem.find('.fmp-volume-state-background').height()-4;
			var mouseY = evt.pageY-$elem.find('.fmp-volume-state-background').offset().top;
			var progress = (mouseY+4)/44;
			if(mouseY < minY) {
				mouseY = minY;
				progress = 0;
			}
			if(mouseY > maxY) {
				mouseY = maxY;
				progress = 1;
			}
							
			$.fancyMusicPlayer.volume(progress);
		};
		
		//will be called when the drag slider will be released
		function _dropVolumeSlider() {	
			$(document).unbind('mousemove', _onVolumeSliderMove);
			$(document).unbind('mouseup', _dropVolumeSlider);
		};
		
		function _createPlaylistTrack(index, title, url) {
			//check if url is a http request		
			var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
			var trackLink = regexp.test(url) ? '<div class="fmp-track-link"></div>' : '';
			var number = options.numberList ? (index+1)+'- ' : '';
			$elem.find('.fmp-playlist').append('<li><div class="fmp-delete-track"></div><span>'+number+title+'</span>'+trackLink+'</li>');
			$elem.find('.fmp-playlist li:last').children('.fmp-delete-track, .fmp-track-link').fadeTo(0, 0.6);
		};
		
		function _setSliderPosition(playProgress) {
			$elem.find('.fmp-time').css('left', (playProgress * timeBarWidth)-13);
			$elem.find('.fmp-time-slider').css('left', (playProgress * timeBarWidth)-6);
		    $elem.find('.fmp-progress-bar').width(playProgress * timeBarWidth);
			
		};
		
		//converts seconds into a well formatted time
		function _convertTime(second) {
			second = Math.abs(second);
			var val = new Array();
			val[0] = Math.floor(second/3600%24);//hours
			val[1] = Math.floor(second/60%60);//mins
			val[2] = Math.floor(second%60);//secs
			var stopage = options.showHours;
			var cutIndex  = -1;
			for(var i = 0; i < val.length; i++) {
				if(val[i] < 10) val[i] = "0" + val[i];		
				if( val[i] == "00" && i < (val.length - 2) && !stopage) cutIndex = i;
				else stopage = true;
			}
			val.splice(0, cutIndex + 1);
			return val.join(':');
		};
		
		//global method for playing the current track
		$.fancyMusicPlayer.play = function() {
			if(tracks.length > 0) {
				player.play();
				$elem.find('.fmp-pp-button div').removeClass().addClass('fmp-pause');
				$elem.find('.fmp-pp-button').removeClass('fmp-play-button-normal fmp-play-button-hover').addClass('fmp-pause-button-normal');
				paused = false;	
			}
		};
		
		//global method for pausing the current track
		$.fancyMusicPlayer.pause = function() {
			if(tracks.length > 0) {
				if(tracks.length === 0) {
					$elem.find('.fmp-current-title').text('');
				}
				
				player.pause();
				$elem.find('.fmp-pp-button div').removeClass().addClass('fmp-play');
				$elem.find('.fmp-pp-button').removeClass('fmp-pause-button-normal fmp-pause-button-hover').addClass('fmp-play-button-normal');
				paused = true;
			}
		};
		
		//global method for pausing/playing the current track
		$.fancyMusicPlayer.toggle = function() {
			if(paused) {
				$.fancyMusicPlayer.play();
			}
			else {
				$.fancyMusicPlayer.pause();
			}	
		};
		
		//global method for playing the previous track
		$.fancyMusicPlayer.previous = function() {
			if(tracks.length > 0) {
				currentIndex--;
				if(currentIndex < 0) { currentIndex = tracks.length - 1 };		
				_selectTrack(currentIndex, true);
			}
		};
		
		//global method for playing the next track
		$.fancyMusicPlayer.next = function() {
			if(tracks.length > 0) {
				currentIndex++;
				if(currentIndex == tracks.length) { currentIndex = 0 };			
				_selectTrack(currentIndex, true);
			}
		};
		
		$.fancyMusicPlayer.volume = function(value) {
			if(tracks.length > 0) {	
				var volumeStateBackgroundHeight = $elem.find('.fmp-volume-state-background').height();
				$elem.find('.fmp-volume-slider').css('top', (volumeStateBackgroundHeight-4) * value);
				$elem.find('.fmp-volume-state').css('height', volumeStateBackgroundHeight * value);
				currentVolume = value * 100;
				player.setVolume(currentVolume);
			}
		};
		
		//global method for adding a track to the playlist
		$.fancyMusicPlayer.addTrack = function(track, title, url, playIt) {
			if ( url === undefined ) {
			   param2 = '';
			}
			if ( playIt === undefined ) {
			   playIt = true;
			}
			
			//check if title already exist, if so, select it
			var exist = $.inArray(title, titles);
			if(exist != -1) {
				_selectTrack(exist, playIt);
				return false;
			}

			tracks.push(track);
			titles.push(title);
			urls.push(url);
			
			_createPlaylistTrack(tracks.length-1, title, url);					
			$elem.find('.fmp-playlist li:first').css('marginTop', 0);
			
			if(playIt) {
				currentIndex = tracks.length - 1;
				_selectTrack(currentIndex, playIt);
			}
		};
		
		//removes all tracks from the playlist and stops playing
		$.fancyMusicPlayer.clear = function() {
			
			$elem.find('.fmp-current-title').text('');
			$elem.find('.fmp-playlist').empty();
			tracks = [];
			titles = [];
			urls = [];
			$.fancyMusicPlayer.pause();
			player.destruct();
	
		};

		return this.each(function() {_init(this)});
	};
	
	//OPTIONS
	$.fn.fancyMusicPlayer.defaults = {
		playlistHeight: 65, //set the playlist height for the scrolling
		volume: true, // show/hide volume control
		playlist: true, //show/hide playlist
		playlistInitOpen: false, //opened playlist when player init
		playlistScrollable: true, //enable/disbale playlist scrolling
		autoLoad: true, //loads the music file when soundmanager is ready
		autoPlay: false, //enable/disbale autoplay
		showHours: false, //hours will be shown in the elapsed time from beginning
		numberList: true, //number playlist
		playNextWhenFinished: true, //plays the next track when current one has finished
		trackColorNormal: '#8d8da8', //normal title color
		trackColorHover: '#aeaec6', //hover title color
		trackColorSelected: '#aeaec6', //selected title color
		targetLink: '_blank', //set target link (e.g. '_self', '_blank', '_parent' etc.)
		xmlPath: '', //the xml path
		xmlPlaylist: '', //the ID of the playlist which should be loaded into player from the XML file
		startIndex: 0, //the index of the song that should be played first
		onReady: function(){}
	};

})(jQuery);